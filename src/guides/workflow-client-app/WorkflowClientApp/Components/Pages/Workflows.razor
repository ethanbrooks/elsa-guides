@page "/workflows"
@rendermode InteractiveServer
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Models
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Contracts
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Requests
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Responses
@using Elsa.Api.Client.Shared.Models
@using System.Net
@using Elsa.Api.Client.Extensions
@attribute [StreamRendering]

<PageTitle>Workflows</PageTitle>

<h1>Workflows</h1>

<p>This component demonstrates interacting with the workflow server.</p>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-success" role="alert">
      @_message
    </div>
}

@if (_workflowDefinitions == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Definition ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var definition in _workflowDefinitions.Items)
        {
            <tr>
                <td>@definition.DefinitionId</td>
                <td>@definition.Name</td>
                <td>@definition.Description</td>
                <td>
                    <button @onclick="@(() => OnRunClick(definition))">Run</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Inject] private IWorkflowDefinitionsApi WorkflowDefinitionsApi { get; set; } = default!;
    private PagedListResponse<WorkflowDefinitionSummary>? _workflowDefinitions;
    private string? _message;

    protected override async Task OnInitializedAsync()
    {
        _workflowDefinitions = await WorkflowDefinitionsApi.ListAsync(new ListWorkflowDefinitionsRequest(), VersionOptions.Published);
    }
    
    private async Task OnRunClick(WorkflowDefinitionSummary definition)
    {
        var response = await WorkflowDefinitionsApi.ExecuteAsync(definition.DefinitionId, new ExecuteWorkflowDefinitionRequest
        {
            VersionOptions = VersionOptions.Published
        });

        if (response.StatusCode == HttpStatusCode.OK)
        {
            var workflowInstanceId = response.GetWorkflowInstanceId();
            _message = $"Started workflow instance {workflowInstanceId}.";
        }
        else
        {
            _message = $"Error starting workflow: {response.StatusCode}";
        }
    }

}